// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid()) @map("id") @db.Uuid // Corrected: Added @map("id") and @db.Uuid
  email            String    @unique @map("email")
  phone            String    @unique @map("phone")
  password         String    @map("password")
  firstName        String    @map("first_name")
  lastName         String    @map("last_name")
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  refreshToken     String?   @unique @map("refresh_token")
  lastLogin        DateTime? @map("last_login")
  resetToken       String?   @map("reset_token")
  resetTokenExpiry DateTime? @map("reset_token_expiry")
  subscriptionTier String?   @default("free") @map("subscription_tier")

  // Relations
  assets           Asset[]
  analysisResults  AnalysisResult[]
  otps             Otp[]

  @@map("users")
}

model Asset {
  id             String         @id @default(uuid()) @map("id") @db.Uuid
  userId         String         @map("user_id") @db.Uuid
  title          String         @map("title")
  type           AssetType      @map("type") // Use Prisma Enum for this
  url            String?        @map("url") // This will store the Cloudinary URL
  filePath       String?        @map("file_path") // Make this optional if only used for temp storage
  extractedText  String?        @map("extracted_text") @db.Text
  metadata       Json?          @map("metadata") // Use Json for JSONB
  tags           String[]       @map("tags") // Use String[] for VARCHAR[]
  publicId       String?        @unique @map("public_id") // Store Cloudinary's public ID for easy management
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  user           User           @relation(fields: [userId], references: [id])
  embeddings     Embedding[]
  analysisResults AnalysisResult[] @relation("AnalysisResultToAsset") // For source_assets

  @@map("assets")
}

enum AssetType {
  document
  video
  image
  article
  tweet
}

model Embedding {
  id          String   @id @default(uuid()) @map("id") @db.Uuid
  assetId     String   @map("asset_id") @db.Uuid
  vectorId    String   @map("vector_id") // Assuming this will be an ID from Pinecone/Weaviate
  chunkText   String   @map("chunk_text") @db.Text
  chunkIndex  Int      @map("chunk_index")
  createdAt   DateTime @default(now()) @map("created_at")

  asset       Asset    @relation(fields: [assetId], references: [id])

  @@map("embeddings")
}

model AnalysisResult {
  id              String    @id @default(uuid()) @map("id") @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  query           String    @map("query") @db.Text
  generatedDocument String  @map("generated_document") @db.Text
  sourceAssetIds  String[]  @map("source_assets") @db.Uuid // Array of UUIDs

  createdAt       DateTime  @default(now()) @map("created_at")

  user            User      @relation(fields: [userId], references: [id])
  // To link to multiple source assets, you might need a many-to-many relationship
  // or handle the array of IDs on the application side. For simplicity, keeping as String[] for now.
  // A proper many-to-many would involve a join table if you need direct Prisma relations for this.
  sourceAssets    Asset[] @relation("AnalysisResultToAsset") // Using an explicit relation name

  @@map("analysis_results")
}

model Otp {
  id            String    @id         @default(uuid())  @db.Uuid
  userId        String    @map("user_id")    @db.Uuid
  otp           String    @map("otp")
  type          OtpType   @map("type")
  contactMethod  String   @map("contact_method")
  expiresAt      DateTime  @map("expires_at")
  createdAt      DateTime   @default(now())  @map("created_at")
  isUsed         Boolean    @default(false)   @map("is_used")

  user           User       @relation(fields: [userId], references: [id])

  @@map("otps")
}

enum OtpType{
  login 
  verification
  password_reset
}